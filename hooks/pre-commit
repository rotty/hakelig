#!/bin/sh

# Copyright 2019, Andreas Rottmann <mail@r0tty.org>.
# Copyright 2016 Google Inc. All Rights Reserved.
#
# Licensed under the MIT License, <LICENSE or
# http://opensource.org/licenses/MIT>.  This file may not be copied,
# modified, or distributed except according to those terms.

#
# Pre-commit hook for a Rust project repository. To use this hook,
# copy it to .git/hooks in your repository root.
#
# This precommit checks the following:
# 1. All filenames are ascii
# 2. There is no bad whitespace
# 3. rustfmt is installed
# 4. rustfmt is a noop on files that are in the index
#
#
# Use git commit --no-verify to skip the pre-commit hook altogether,
# for example when committing on a work-in-progress branch.

set -e

# Colored output if `stdout` is a terminal
if [ -t 1 ]; then
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[0;33m'
    NC='\033[0m' # No Color
else
    RED=''
    GREEN=''
    YELLOW=''
    NC=''
fi

PREFIX="${GREEN}[PRECOMMIT]${NC}"
FAILURE="${RED}FAILED${NC}"
WARNING="${RED}[WARNING]${NC}"
SKIPPED="${YELLOW}SKIPPED${NC}"
SUCCESS="${GREEN}ok${NC}"

if git rev-parse --verify HEAD > /dev/null 2>&1
then
        against=HEAD
else
        # Initial commit: diff against an empty tree object
        against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

FAILED=0

printf "${PREFIX} Checking that all filenames are ascii ... "
# Note that the use of brackets around a tr range is ok here, (it's
# even required, for portability to Solaris 10's /usr/bin/tr), since
# the square bracket bytes happen to fall in the designated range.
if [ $(git diff --cached --name-only --diff-filter=A -z $against | LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0 ]
then
        FAILED=1
        printf "${FAILURE}\n"
else
        printf "${SUCCESS}\n"
fi

printf "${PREFIX} Checking for bad whitespace ... "
if ! git diff-index --check --cached $against -- > /dev/null 2>&1; then
        FAILED=1
        printf "${FAILURE}\n"
else
        printf "${SUCCESS}\n"
fi

for tool in fmt clippy; do
    printf "${PREFIX} Checking for cargo $tool ... "
    if command -v cargo $tool > /dev/null 2>&1; then
        printf "${SUCCESS}\n"
    else
        printf "${FAILURE}\n"
        exit 1
    fi
done

printf "${PREFIX} Checking formatting ... \n"
FMT_RESULT=0
if ! cargo fmt -- --check $(git ls-files | grep '\.rs$'); then
    FMT_RESULT=1
fi

printf "${PREFIX} Running clippy ... \n"
CLIPPY_RESULT=0
if ! cargo clippy --all-features --all-targets -- -D warnings; then
    CLIPPY_RESULT=1
fi

printf "${PREFIX} Running tests ... \n"
TEST_RESULT=0
if ! cargo test; then
    TEST_RESULT=1
fi

if [ ${FMT_RESULT} != 0 ]; then
        FAILED=1
        printf "${FAILURE} Please check the code formatting\n"
fi
if [ ${CLIPPY_RESULT} != 0 ]; then
        FAILED=1
        printf "${FAILURE} Please check clippy results\n"
fi
if [ ${TEST_RESULT} != 0 ]; then
        FAILED=1
        printf "${FAILURE} Please check test results\n"
fi

if [ ${FAILED} = 0 ]; then
    printf "${PREFIX} All checks passed\n"
fi

exit ${FAILED}
